{"ast":null,"code":"var _jsxFileName = \"/Users/karnvadaliya/weatherapp/src/components/threehourly.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\n\nclass threehourly extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.convertTime = time => {\n      // Check correct time format and split into components\n      time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n      if (time.length > 1) {\n        // If time format correct\n        time = time.slice(1); // Remove full string match value\n\n        time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n\n        time[0] = +time[0] % 12 || 12; // Adjust hours\n      }\n\n      console.log(time);\n      return time[0] + \" \" + time[5]; // return adjusted time or original string\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    var dateArray = this.props.location.state.date.split(' ');\n    var dayList = [];\n    var j = 0;\n\n    for (var i = 0; i < this.props.days.length; i++) {\n      const currDateArray = this.props.days[i].dt_txt.split(' ');\n\n      if (currDateArray[0] === dateArray[0]) {\n        dayList[j] = this.props.days[i];\n        j++;\n      }\n    }\n\n    const allTimes = dayList.length ? dayList.map(day => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.convertTime(day.dt_txt.split(' ')[1])), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, day.weather[0].main), React.createElement(\"img\", {\n        src: \"http://openweathermap.org/img/wn/\" + day.weather[0].icon + \"@2x.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, day.main.temp), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, day.main.feels_like));\n    }) : React.createElement(\"div\", {\n      style: {\n        display: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, allTimes);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    city: state.city,\n    current: state.current,\n    days: state.days\n  };\n};\n\nexport default connect(mapStateToProps)(threehourly);","map":{"version":3,"sources":["/Users/karnvadaliya/weatherapp/src/components/threehourly.js"],"names":["React","Component","axios","moment","connect","threehourly","convertTime","time","toString","match","length","slice","console","log","componentDidMount","render","dateArray","props","location","state","date","split","dayList","j","i","days","currDateArray","dt_txt","allTimes","map","day","weather","main","icon","temp","feels_like","display","mapStateToProps","city","current"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\n\nclass threehourly extends Component{\n   \n    componentDidMount(){\n       \n    }\n\n    convertTime = (time) =>{\n        // Check correct time format and split into components\n        time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n        if (time.length > 1) { // If time format correct\n            time = time.slice (1);  // Remove full string match value\n            time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n            time[0] = +time[0] % 12 || 12; // Adjust hours\n        }\n        console.log(time);\n        return time[0]+\" \"+time[5]; // return adjusted time or original string\n    }\n\n    render(){\n    var dateArray = this.props.location.state.date.split(' ')\n    var dayList=[]\n    var j=0\n    for(var i=0;i<this.props.days.length;i++)\n    {\n        const currDateArray=this.props.days[i].dt_txt.split(' ')\n        if(currDateArray[0]===dateArray[0])\n        {\n            dayList[j]=this.props.days[i]\n            j++\n        }\n    }\n\n\n\n    const allTimes = dayList.length?(\n        dayList.map(day=>{\n            return(\n                <div>\n                <p>{this.convertTime(day.dt_txt.split(' ')[1])}</p>\n                <p>{day.weather[0].main}</p>\n                <img src={\"http://openweathermap.org/img/wn/\"+day.weather[0].icon+\"@2x.png\"} />\n                <p>{day.main.temp}</p>\n                <p>{day.main.feels_like}</p>\n                </div>\n            )\n    })):(<div style={{display:\"none\"}}>\n    </div>)\n   \n        return(\n            <div>\n            {allTimes}\n            </div>\n        )\n    }\n\n\n}\n\n\nconst mapStateToProps = (state)=>{\n    return{\n        city:state.city,\n        current:state.current,\n        days:state.days\n    }\n}\n\nexport default connect(mapStateToProps)(threehourly)"]},"metadata":{},"sourceType":"module"}