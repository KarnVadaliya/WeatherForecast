{"version":3,"sources":["components/weather.js","components/threehourly.js","App.js","serviceWorker.js","reducers/rootreducer.js","index.js"],"names":["weather","handleSubmit","e","preventDefault","props","updateCity","target","city","value","unitValue","unit","axios","get","then","res","updateDays","data","list","catch","error","updateCurrent","temp","icon","wind","feels_like","main","speed","tempChange","updateUnit","updateWindUnit","this","console","log","dayList","j","highestTemp","lowestTemp","i","days","length","dt_txt","high","low","icn","forecast","map","day","className","key","to","pathname","moment","format","state","date","style","textDecoration","src","alt","display","onSubmit","textAlign","htmlFor","fontSize","color","id","type","onChange","handleChange","onClick","position","current","windunit","Component","connect","dispatch","threehourly","handleClick","history","push","convertTime","time","toString","match","slice","dateArray","location","split","allTimes","faChevronLeft","App","exact","path","component","Boolean","window","hostname","initState","rootreducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0UAOMA,E,2MA0BFC,aAAa,SAACC,GACVA,EAAEC,iBACF,EAAKC,MAAMC,WAAWH,EAAEI,OAAOC,KAAKC,OACpC,IAAIC,EAAU,GAGVA,EAFiB,MAAlB,EAAKL,MAAMM,KAEA,SAGA,WAGdC,IAAMC,IAAI,sDAAsDV,EAAEI,OAAOC,KAAKC,MAAM,iDAAiDC,GAChII,MAAK,SAAAC,GACF,EAAKV,MAAMW,WAAWD,EAAIE,KAAKC,SAChCC,OAAM,SAAAC,GACL,EAAKf,MAAMC,WAAW,qBACtB,EAAKD,MAAMW,WAAW,IACtB,EAAKX,MAAMgB,cAAc,CAACC,KAAM,IAAKC,KAAM,IAAKC,KAAM,IAAKC,WAAW,SAG9Eb,IAAMC,IAAI,qDAAqDV,EAAEI,OAAOC,KAAKC,MAAM,iDAAiDC,GAC/HI,MAAK,SAAAC,GACF,EAAKV,MAAMgB,cAAc,CAACC,KAAMP,EAAIE,KAAKS,KAAKJ,KACpBC,KAAKR,EAAIE,KAAKhB,QAAQ,GAAGsB,KACzBC,KAAKT,EAAIE,KAAKO,KAAKG,MACnBF,WAAWV,EAAIE,KAAKS,KAAKD,gBACpDN,OAAM,SAAAC,GACL,EAAKf,MAAMC,WAAW,qBACtB,EAAKD,MAAMW,WAAW,IACtB,EAAKX,MAAMgB,cAAc,CAACC,KAAM,IAAKC,KAAM,IAAKC,KAAM,IAAKC,WAAW,U,EAKlFG,WAAW,SAACzB,GACY,WAAjBA,EAAEI,OAAOE,OAER,EAAKJ,MAAMwB,WAAW,KACtB,EAAKxB,MAAMyB,eAAe,eAG1B,EAAKzB,MAAMwB,WAAW,KACtB,EAAKxB,MAAMyB,eAAe,eAE9BlB,IAAMC,IAAI,sDAAsD,EAAKR,MAAMG,KAAK,iDAAiDL,EAAEI,OAAOE,OACrIK,MAAK,SAAAC,GACF,EAAKV,MAAMW,WAAWD,EAAIE,KAAKC,SAChCC,OAAM,SAAAC,GACL,EAAKf,MAAMC,WAAW,qBACtB,EAAKD,MAAMW,WAAW,IACtB,EAAKX,MAAMgB,cAAc,CAACC,KAAM,IAAKC,KAAM,IAAKC,KAAM,IAAKC,WAAW,SAG9Eb,IAAMC,IAAI,qDAAqD,EAAKR,MAAMG,KAAK,iDAAiDL,EAAEI,OAAOE,OACpIK,MAAK,SAAAC,GACF,EAAKV,MAAMgB,cAAc,CAACC,KAAMP,EAAIE,KAAKS,KAAKJ,KACpBC,KAAKR,EAAIE,KAAKhB,QAAQ,GAAGsB,KACzBC,KAAKT,EAAIE,KAAKO,KAAKG,MACnBF,WAAWV,EAAIE,KAAKS,KAAKD,gBACpDN,OAAM,SAAAC,GACL,EAAKf,MAAMC,WAAW,qBACtB,EAAKD,MAAMW,WAAW,IACtB,EAAKX,MAAMgB,cAAc,CAACC,KAAM,IAAKC,KAAM,IAAKC,KAAM,IAAKC,WAAW,U,mFAvF9D,IAAD,OACXf,EAAU,GAGVA,EAFiB,MAAlBqB,KAAK1B,MAAMM,KAEA,SAGA,WAEdqB,QAAQC,IAAI,OAEZrB,IAAMC,IAAI,sDAAsDkB,KAAK1B,MAAMG,KAAK,iDAAiDE,GAC5HI,MAAK,SAAAC,GACFiB,QAAQC,IAAIlB,EAAIE,MAChB,EAAKZ,MAAMW,WAAWD,EAAIE,KAAKC,SAGvCN,IAAMC,IAAI,qDAAqDkB,KAAK1B,MAAMG,KAAK,iDAAiDE,GAC3HI,MAAK,SAAAC,GACFiB,QAAQC,IAAIlB,EAAIE,MAChB,EAAKZ,MAAMgB,cAAc,CAACC,KAAMP,EAAIE,KAAKS,KAAKJ,KAAMC,KAAKR,EAAIE,KAAKhB,QAAQ,GAAGsB,KAAMC,KAAKT,EAAIE,KAAKO,KAAKG,MAAOF,WAAWV,EAAIE,KAAKS,KAAKD,kB,+BA6E9I,IANK,IAAD,OACES,EAAQ,GACVC,EAAE,EACFC,GAAa,IACbC,EAAW,IAEPC,EAAE,EAAEA,EAAEP,KAAK1B,MAAMkC,KAAKC,OAAOF,IAE9BP,KAAK1B,MAAMkC,KAAKD,GAAGZ,KAAKJ,KAAKc,IAC5BA,EAAYL,KAAK1B,MAAMkC,KAAKD,GAAGZ,KAAKJ,MACrCS,KAAK1B,MAAMkC,KAAKD,GAAGZ,KAAKJ,KAAKe,IAC5BA,EAAWN,KAAK1B,MAAMkC,KAAKD,GAAGZ,KAAKJ,MAChC,IAAJgB,GAAa,KAAJA,GAAc,KAAJA,GAAc,KAAJA,GAAc,KAAJA,IAEtCJ,EAAQC,GAAG,CAACM,OAAOV,KAAK1B,MAAMkC,KAAKD,GAAGG,OAAOC,KAAKN,EAAYO,IAAIN,EAAWO,IAAIb,KAAK1B,MAAMkC,KAAKD,GAAGrC,QAAQ,GAAGsB,MAC/GY,IACAC,GAAa,IACbC,EAAW,KAKnB,IAAMQ,EAAWX,EAAQM,OAAQN,EAAQY,KAAI,SAAAC,GAAM,OAC/C,yBAAKC,UAAU,MAAMC,IAAKF,EAAIN,QAC1B,kBAAC,IAAD,CAAMS,GAAI,CAAEC,SAAS,IAAD,OAAMC,IAAOL,EAAIN,QAAQY,OAAO,SAAWC,MAAM,CAACC,KAAKR,EAAIN,SAAUe,MAAO,CAAEC,eAAgB,SAC9G,4BAAKL,IAAOL,EAAIN,QAAQY,OAAO,QAC/B,yBAAKK,IAAK,qCAAqCX,EAAIH,IAAI,UAAWe,IAAI,iBACtE,2CAAkBZ,EAAIL,KAAtB,OAAiC,EAAKrC,MAAMM,MAC5C,0CAAiBoC,EAAIJ,IAArB,OAA+B,EAAKtC,MAAMM,WAGhD,yBAAK6C,MAAO,CAACI,QAAQ,UAK3B,OAII,yBAAKZ,UAAU,aACf,6BACI,0BAAMA,UAAU,MAAMa,SAAU9B,KAAK7B,cACjC,yBAAK8C,UAAU,OACX,yBAAKQ,MAAO,CAACM,UAAU,WACvB,2BAAOC,QAAQ,OAAOf,UAAU,SAASQ,MAAO,CAC5CQ,SAAU,OACVC,MAAO,aACR,+CACC,2BAAOC,GAAG,OAAOC,KAAK,OAAOnB,UAAU,WAAWoB,SAAUrC,KAAKsC,kBAIrE,yBAAKrB,UAAU,WACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,QACX,mCACA,uBAAGA,UAAU,QAAQjB,KAAK1B,MAAMG,MAChC,uBAAGwC,UAAU,UAAb,IAAuB,4BAAQvC,MAAM,WAAW6D,QAASvC,KAAKH,WAAY4B,MAAO,CAACe,SAAS,SAAUN,MAAM,UAApF,UAAvB,MAAwI,4BAAQxD,MAAM,SAAS6D,QAASvC,KAAKH,WAAY4B,MAAO,CAACe,SAAS,SAAUN,MAAM,UAAlF,WACxI,yBAAKP,IAAK,qCAAqC3B,KAAK1B,MAAMmE,QAAQjD,KAAK,UAAWoC,IAAI,iBACtF,uBAAGX,UAAU,QAAQjB,KAAK1B,MAAMmE,QAAQlD,KAAxC,QAAoDS,KAAK1B,MAAMM,KAAK,6BACpE,0BAAMqC,UAAU,SAAQ,8CAA2BjB,KAAK1B,MAAMmE,QAAQ/C,WAAtE,QAAwFM,KAAK1B,MAAMM,OAEnG,uBAAGqC,UAAU,QAAO,wCAApB,IAA0CjB,KAAK1B,MAAMmE,QAAQhD,KAA7D,IAAoEO,KAAK1B,MAAMoE,UAC/E,sCAKpB,yBAAKzB,UAAU,UACEH,Q,GAnKX6B,aAkMPC,eArBS,SAACrB,GACrB,MAAM,CACF9C,KAAK8C,EAAM9C,KACXgE,QAAQlB,EAAMkB,QACdjC,KAAKe,EAAMf,KACX5B,KAAK2C,EAAM3C,KACX8D,SAASnB,EAAMmB,aAII,SAACG,GACxB,MAAM,CACFtE,WAAY,SAACE,GAAQoE,EAAS,CAACT,KAAK,cAAc3D,KAAKA,KACvDa,cAAe,SAACmD,GAAWI,EAAS,CAACT,KAAK,iBAAiBK,QAAQA,KACnExD,WAAY,SAACuB,GAAQqC,EAAS,CAACT,KAAK,cAAc5B,KAAKA,KACvDV,WAAY,SAAClB,GAAQiE,EAAS,CAACT,KAAK,cAAcxD,KAAKA,KACvDmB,eAAgB,SAAC2C,GAAYG,EAAS,CAACT,KAAK,kBAAkBM,SAASA,QAKhEE,CAA4C1E,G,gBChMrD4E,E,2MAEFC,YAAc,SAAC3E,GACV,EAAKE,MAAM0E,QAAQC,KAAK,M,EAG7BC,YAAc,SAACC,GASX,OAPAA,EAAOA,EAAKC,WAAYC,MAAO,6CAA+C,CAACF,IAEtE1C,OAAS,KACd0C,EAAOA,EAAKG,MAAO,IACd,IAAMH,EAAK,GAAK,GAAK,KAAO,KACjCA,EAAK,IAAMA,EAAK,GAAK,IAAM,IAExBA,EAAK,GAAG,IAAIA,EAAK,I,wEAO5B,IAJS,IAAD,OACJI,EAAYvD,KAAK1B,MAAMkF,SAASjC,MAAMC,KAAKiC,MAAM,KACjDtD,EAAQ,GACRC,EAAE,EACEG,EAAE,EAAEA,EAAEP,KAAK1B,MAAMkC,KAAKC,OAAOF,IACrC,CACwBP,KAAK1B,MAAMkC,KAAKD,GAAGG,OAAO+C,MAAM,KACnC,KAAKF,EAAU,KAE5BpD,EAAQC,GAAGJ,KAAK1B,MAAMkC,KAAKD,GAC3BH,KAMR,IAAMsD,EAAWvD,EAAQM,OACrBN,EAAQY,KAAI,SAAAC,GACR,OACI,yBAAKC,UAAU,aAAaC,IAAKF,EAAIN,QACrC,yBAAKO,UAAU,WACZ,yBAAKA,UAAU,WAEN,wBAAIQ,MAAO,CAACS,MAAO,aAAc,EAAKgB,YAAYlC,EAAIN,OAAO+C,MAAM,KAAK,KACxE,6BACA,uBAAGxC,UAAU,mBAAmBD,EAAI9C,QAAQ,GAAGyB,MAC/C,6BACA,yBAAKgC,IAAK,qCAAqCX,EAAI9C,QAAQ,GAAGsB,KAAK,UAAWoC,IAAI,iBAClF,6BACA,4BAAI,gCAASZ,EAAIrB,KAAKJ,KAAlB,QAAsC,EAAKjB,MAAMM,MACrD,6BACA,4BAAI,0CAAJ,IAAwBoC,EAAIrB,KAAKD,WAAjC,OAAkD,EAAKpB,MAAMM,YAKhF,yBAAK6C,MAAO,CAACI,QAAQ,UAGtB,OACI,yBAAKZ,UAAU,aACf,4BAAQsB,QAASvC,KAAK+C,aACtB,kBAAC,IAAD,CAAiBvD,KAAMmE,IAAelC,MAClC,CACIQ,SAAU,OACVC,MAAO,eAGX,4BAAKb,IAAOrB,KAAK1B,MAAMkF,SAASjC,MAAMC,MAAMF,OAAO,uBACnD,yBAAKL,UAAU,OACVyC,Q,GApEKf,aAyFXC,eAXS,SAACrB,GACrB,MAAM,CACF9C,KAAK8C,EAAM9C,KACXgE,QAAQlB,EAAMkB,QACdjC,KAAKe,EAAMf,KACX5B,KAAK2C,EAAM3C,KACX8D,SAASnB,EAAMmB,YAKRE,CAAyBE,G,OC9EzBc,MAXf,WACE,OACE,kBAAC,IAAD,CAAe3C,UAAU,OACvB,6BACE,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,IAAIC,UAAW7F,IACjC,kBAAC,IAAD,CAAO2F,OAAK,EAACC,KAAK,QAAQC,UAAWjB,OCFzBkB,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASb,MACvB,2D,oBClBAc,EAAU,CACZ1F,KAAK,SACLgE,QAAQ,GACRjC,KAAK,GACL5B,KAAM,IACN8D,SAAU,cAmCC0B,EAhCI,WAA2B,IAA1B7C,EAAyB,uDAAnB4C,EAAUE,EAAS,uCACzC,OAAQA,EAAOjC,MACX,IAAK,cACD,sBACOb,EADP,CAEI9C,KAAO4F,EAAO5F,OAEtB,IAAK,iBACD,sBACO8C,EADP,CAEIkB,QAAQ4B,EAAO5B,UAEvB,IAAK,cACD,sBACOlB,EADP,CAEIf,KAAK6D,EAAO7D,OAEpB,IAAK,cACL,sBACOe,EADP,CAEI3C,KAAOyF,EAAOzF,OAElB,IAAK,kBACL,sBACO2C,EADP,CAEImB,SAAW2B,EAAO3B,WAEtB,QACI,OAAOnB,IC3Bb+C,EAAOC,YAAYH,GAEzBI,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAQ,kBAAC,EAAD,OAAoBI,SAASC,eAAe,SFwH/E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/F,MAAK,SAAAgG,GACJA,EAAaC,gBAEd5F,OAAM,SAAAC,GACLY,QAAQZ,MAAMA,EAAM4F,c","file":"static/js/main.e419b433.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\n\nclass weather extends Component{\n    \n    componentDidMount(){\n        var unitValue=''\n        if(this.props.unit==='C')\n        {\n            unitValue=\"metric\"\n        }\n        else{\n            unitValue=\"imperial\"\n        }\n        console.log(\"abc\");\n\n        axios.get(\"https://api.openweathermap.org/data/2.5/forecast?q=\"+this.props.city+\"&appid=d90a4edf4d91049321f5b1505b2d7d7e&units=\"+unitValue)\n            .then(res=>{\n                console.log(res.data);\n                this.props.updateDays(res.data.list);\n            })\n\n        axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\"+this.props.city+\"&appid=d90a4edf4d91049321f5b1505b2d7d7e&units=\"+unitValue)\n            .then(res=>{\n                console.log(res.data);\n                this.props.updateCurrent({temp: res.data.main.temp, icon:res.data.weather[0].icon, wind:res.data.wind.speed, feels_like:res.data.main.feels_like})\n            })\n    }\n\n    handleSubmit=(e)=>{\n        e.preventDefault()\n        this.props.updateCity(e.target.city.value)\n        var unitValue=''\n        if(this.props.unit==='C')\n        {\n            unitValue=\"metric\"\n        }\n        else{\n            unitValue=\"imperial\"\n\n        }\n        axios.get(\"https://api.openweathermap.org/data/2.5/forecast?q=\"+e.target.city.value+\"&appid=d90a4edf4d91049321f5b1505b2d7d7e&units=\"+unitValue)\n            .then(res=>{\n                this.props.updateDays(res.data.list)\n            }).catch(error=>{\n                this.props.updateCity('Invalid City Name')\n                this.props.updateDays([])\n                this.props.updateCurrent({temp: '-', icon: '-', wind: '-', feels_like:'-'})\n            });\n\n        axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\"+e.target.city.value+\"&appid=d90a4edf4d91049321f5b1505b2d7d7e&units=\"+unitValue)\n            .then(res=>{\n                this.props.updateCurrent({temp: res.data.main.temp, \n                                          icon:res.data.weather[0].icon, \n                                          wind:res.data.wind.speed, \n                                          feels_like:res.data.main.feels_like})\n            }).catch(error=>{\n                this.props.updateCity('Invalid City Name')\n                this.props.updateDays([])\n                this.props.updateCurrent({temp: '-', icon: '-', wind: '-', feels_like:'-'})\n            })\n    }\n\n\n    tempChange=(e)=>{\n        if(e.target.value===\"metric\")\n        {\n            this.props.updateUnit('C')\n            this.props.updateWindUnit('meter/sec')\n        }\n        else{\n            this.props.updateUnit('F')\n            this.props.updateWindUnit('miles/hour')\n        }\n        axios.get(\"https://api.openweathermap.org/data/2.5/forecast?q=\"+this.props.city+\"&appid=d90a4edf4d91049321f5b1505b2d7d7e&units=\"+e.target.value)\n            .then(res=>{\n                this.props.updateDays(res.data.list)\n            }).catch(error=>{\n                this.props.updateCity('Invalid City Name')\n                this.props.updateDays([])\n                this.props.updateCurrent({temp: '-', icon: '-', wind: '-', feels_like:'-'})\n            });\n\n        axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\"+this.props.city+\"&appid=d90a4edf4d91049321f5b1505b2d7d7e&units=\"+e.target.value)\n            .then(res=>{\n                this.props.updateCurrent({temp: res.data.main.temp, \n                                          icon:res.data.weather[0].icon, \n                                          wind:res.data.wind.speed, \n                                          feels_like:res.data.main.feels_like})\n            }).catch(error=>{\n                this.props.updateCity('Invalid City Name')\n                this.props.updateDays([])\n                this.props.updateCurrent({temp: '-', icon: '-', wind: '-', feels_like:'-'})\n            })\n    }\n\n    render(){\n        const dayList=[]\n        var j=0\n        var highestTemp=-1000\n        var lowestTemp=1000\n       \n        for(var i=0;i<this.props.days.length;i++)\n        {\n            if(this.props.days[i].main.temp>highestTemp)\n                highestTemp=this.props.days[i].main.temp\n            if(this.props.days[i].main.temp<lowestTemp)\n                lowestTemp=this.props.days[i].main.temp\n            if(i===6 || i===14 || i===22 || i===30 || i===38)\n            {\n                dayList[j]={dt_txt:this.props.days[i].dt_txt,high:highestTemp,low:lowestTemp,icn:this.props.days[i].weather[0].icon}\n                j++\n                highestTemp=-1000\n                lowestTemp=1000\n            }\n        }\n\n\n        const forecast = dayList.length?(dayList.map(day=>{return (\n            <div className=\"day\" key={day.dt_txt}>\n                <Link to={{ pathname: `/${moment(day.dt_txt).format('dddd')}`, state:{date:day.dt_txt}}} style={{ textDecoration: 'none' }}>\n                    <h3>{moment(day.dt_txt).format('ddd')}</h3>\n                    <img src={\"https://openweathermap.org/img/wn/\"+day.icn+\"@2x.png\"} alt=\"weather_icon\" />\n                    <p>High: &#8593; {day.high}&deg;{this.props.unit}</p>\n                    <p>Low: &#8595; {day.low}&deg;{this.props.unit}</p>\n                </Link>\n            </div>\n        )})):(<div style={{display:\"none\"}}>\n            </div>)\n\n           \n\n        return(\n           \n\n\n            <div className=\"container\">\n            <br/>\n                <form className=\"row\" onSubmit={this.handleSubmit}>\n                    <div className=\"row\">\n                        <div style={{textAlign:\"center\"}}>  \n                        <label htmlFor=\"city\" className=\"active\" style={{\n                            fontSize: \"25px\",\n                            color: \"darkBlue\"\n                        }}><strong>Enter City</strong></label>   \n                            <input id=\"city\" type=\"text\" className=\"validate\" onChange={this.handleChange}></input>\n                        </div>\n                    </div>\n                </form>\n                        <div className=\"weather\">\n                            <div className=\"current\">\n                                <div className=\"info\">\n                                    <p>&nbsp;</p>\n                                    <p className=\"city\">{this.props.city}</p>\n                                    <p className=\"degree\"> <button value=\"imperial\" onClick={this.tempChange} style={{position:\"static\", color:\"white\"}}>&deg; F</button> | <button value=\"metric\" onClick={this.tempChange} style={{position:\"static\", color:\"white\"}}>&deg; C</button></p> \n                                    <img src={\"https://openweathermap.org/img/wn/\"+this.props.current.icon+\"@2x.png\"} alt=\"weather_icon\" />\n                                    <p className=\"temp\">{this.props.current.temp}&deg; {this.props.unit}<br/>\n                                    <span className=\"feels\"><small>Feels like:</small>{this.props.current.feels_like}&deg; {this.props.unit}</span>\n                                    </p>\n                                    <p className=\"wind\"><small>Wind:</small> {this.props.current.wind} {this.props.windunit}</p>\n                                    <p>&nbsp;</p>\n                                </div>\n                                \n                            </div>\n                        </div>\n                <div className=\"future\">\n                                {forecast}\n                            </div>\n            </div>\n            \n\n\n        )\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    return{\n        city:state.city,\n        current:state.current,\n        days:state.days,\n        unit:state.unit,\n        windunit:state.windunit\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        updateCity: (city)=>{dispatch({type:'UPDATE_CITY',city:city})},\n        updateCurrent: (current)=>{dispatch({type:'UPDATE_CURRENT',current:current})},\n        updateDays: (days)=>{dispatch({type:'UPDATE_DAYS',days:days})},\n        updateUnit: (unit)=>{dispatch({type:'UPDATE_UNIT',unit:unit})},\n        updateWindUnit: (windunit)=>{dispatch({type:'UPDATE_WINDUNIT',windunit:windunit})}\n    }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(weather)","import React, { Component } from 'react';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\n\n\n\n\nclass threehourly extends Component{\n   \n    handleClick = (e) =>{\n         this.props.history.push(\"/\")\n     }\n\n    convertTime = (time) =>{\n        // Check correct time format and split into components\n        time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n        if (time.length > 1) { // If time format correct\n            time = time.slice (1);  // Remove full string match value\n            time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n            time[0] = +time[0] % 12 || 12; // Adjust hours\n        }\n        return time[0]+\" \"+time[5]; // return adjusted time or original string\n    }\n\n    render(){\n    var dateArray = this.props.location.state.date.split(' ')\n    var dayList=[]\n    var j=0\n    for(var i=0;i<this.props.days.length;i++)\n    {\n        const currDateArray=this.props.days[i].dt_txt.split(' ')\n        if(currDateArray[0]===dateArray[0])\n        {\n            dayList[j]=this.props.days[i]\n            j++\n        }\n    }\n\n\n\n    const allTimes = dayList.length?(\n        dayList.map(day=>{\n            return(\n                <div className=\"col s12 m3\" key={day.dt_txt}>\n                <div className=\"flexBox\">\n                   <div className=\"timeDay\">\n                        \n                            <h5 style={{color: \"darkBlue\"}}>{this.convertTime(day.dt_txt.split(' ')[1])}</h5>\n                            <br></br>\n                            <p className=\"card-title bold\">{day.weather[0].main}</p>\n                            <br></br>\n                            <img src={\"https://openweathermap.org/img/wn/\"+day.weather[0].icon+\"@2x.png\"} alt=\"weather_icon\" />\n                            <br></br>\n                            <h5><strong>{day.main.temp}&deg;</strong>{this.props.unit}</h5>\n                            <br></br>\n                            <h5><p>Feels like:</p> {day.main.feels_like}&deg;{this.props.unit}</h5>\n                        </div>\n                        </div>\n                </div>\n            )\n    })):(<div style={{display:\"none\"}}>\n    </div>)\n   \n        return(\n            <div className=\"container\">\n            <button onClick={this.handleClick}>\n            <FontAwesomeIcon icon={faChevronLeft} style={\n                {\n                    fontSize: \"50px\",\n                    color: \"darkblue\"\n                }\n            }/></button>\n                <h4>{moment(this.props.location.state.date).format(\"dddd, MMMM Do YYYY\")}</h4>\n                <div className=\"row\">\n                    {allTimes}\n                </div>    \n            </div>\n        )\n    }\n\n\n}\n\n\nconst mapStateToProps = (state)=>{\n    return{\n        city:state.city,\n        current:state.current,\n        days:state.days,\n        unit:state.unit,\n        windunit:state.windunit\n    }\n}\n\n\nexport default connect(mapStateToProps)(threehourly)","import React from 'react';\nimport './App.css';\nimport weather from './components/weather';\nimport threehourly from './components/threehourly';\nimport {Route,BrowserRouter} from 'react-router-dom';\n\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter className=\"App\" >\n      <div>\n        <Route exact path=\"/\" component={weather} />\n        <Route exact path=\"/:day\" component={threehourly}/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState={\n    city:'Boston',\n    current:{},\n    days:[],\n    unit: 'F',\n    windunit: 'miles/hour'\n}\n\nconst rootreducer =(state=initState,action)=>{\n    switch (action.type) {\n        case 'UPDATE_CITY':\n            return{\n                ...state,\n                city : action.city\n            }\n        case 'UPDATE_CURRENT':\n            return{\n                ...state,\n                current:action.current\n            }\n        case 'UPDATE_DAYS':\n            return{\n                ...state,\n                days:action.days\n            }\n        case 'UPDATE_UNIT':\n        return{\n            ...state,\n            unit : action.unit\n        }\n        case 'UPDATE_WINDUNIT':\n        return{\n            ...state,\n            windunit : action.windunit\n        }\n        default:\n            return state;\n    }\n}\n\nexport default rootreducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootreducer from './reducers/rootreducer.js';\n\nconst store= createStore(rootreducer);\n\nReactDOM.render(<Provider store={store} ><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}